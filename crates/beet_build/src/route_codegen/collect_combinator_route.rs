use crate::prelude::*;
use beet_core::as_beet::*;
use beet_parse::prelude::tokenize_bundle;
use bevy::prelude::*;
use syn::ItemFn;



/// Added to the root of route files that have been parsed into a tree via
/// [`CombinatorTokens`], ie `.md` and `.rsx` files.
#[derive(Debug, Clone, Component)]
pub struct CombinatorRouteCodegen;

/// After a [`CombinatorTokens`] has been parsed into a [`Bundle`],
/// tokenize it and append to the [`CodegenFile`].
pub fn tokenize_combinator_route(world: &mut World) -> Result {
	let mut query = world
		.query_filtered::<(Entity,&SourceFileRef), (With<CodegenFile>, Changed<CombinatorRouteCodegen>)>(
		);
	for (entity, source_file_ref) in query
		.iter(world)
		.map(|(entity, source_file)| (entity, **source_file))
		.collect::<Vec<_>>()
	{
		let snippets = world
			.entity(source_file_ref)
			.get::<RsxSnippets>()
			.expect("Combinator Source File should have RsxSnippets");

		assert!(
			snippets.len() == 1,
			"Combinator Source File should have exactly one RsxSnippet"
		);
		let static_root = snippets[0];

		// this is a static but we need an instance, the only difference being
		// StaticRoot vs InstanceRoot
		world
			.entity_mut(static_root)
			.remove::<StaticRoot>()
			.insert(InstanceRoot);
		let tokens = tokenize_bundle(world, static_root)?;
		world
			.entity_mut(static_root)
			.remove::<InstanceRoot>()
			.insert(StaticRoot);


		// let foo = world
		// 	.component_names_related::<Children>(instance_root)
		// 	.iter_to_string_indented();
		// println!("Children of instance root: \n{}", foo);

		trace!("Tokenizing combinator route for entity: {:?}", entity);
		world
			.entity_mut(entity)
			.get_mut::<CodegenFile>()
			.unwrap() // checked in query filter
			.add_item::<ItemFn>(syn::parse_quote!(
				pub fn get() -> impl Bundle{
					#tokens
				}
			));
	}
	Ok(())
}


#[cfg(test)]
mod test {
	use crate::prelude::*;
	use beet_core::prelude::WorldMutExt;
	use beet_utils::prelude::WsPathBuf;
	use bevy::prelude::*;
	use quote::ToTokens;
	use quote::quote;
	use sweet::prelude::*;

	#[test]
	fn works() {
		let mut app = App::new();
		app.add_plugins(BuildPlugin::without_fs())
			.world_mut()
			.spawn(RouteFileCollection::test_site_docs());
		app.world_mut().spawn(SourceFile::new(
			WsPathBuf::new(
				"crates/beet_router/src/test_site/test_docs/hello.md",
			)
			.into_abs(),
		));


		app.update();
		app
			.world_mut()
			.query_filtered_once::<&CodegenFile, With<CombinatorRouteCodegen>>(
			)[0]
			.build_output()
			.unwrap()
			.to_token_stream()
			.to_string().xpect().to_be_str(quote!{
				#![doc = r" ðŸŒ±ðŸŒ±ðŸŒ± This file has been auto generated by Beet."]
				#![doc = r" ðŸŒ±ðŸŒ±ðŸŒ± Any changes will be overridden if the file is regenerated."]
				#[allow(unused_imports)]
				use beet::prelude::*;
				#[allow(unused_imports)]
				use crate as test_site;

				#[allow(unused)]
				pub fn meta() -> () {
					{
						beet::exports::toml::from_str("title = \"hello\"\n[sidebar]\norder = 2\n")
					}
					.map_err(|err| {
						format!("Failed to parse meta: {}", err)
					})
					.unwrap()
				}

				pub fn get() -> impl Bundle {
					(
						SnippetRoot {
							file: WsPathBuf::new("crates/beet_router/src/test_site/test_docs/hello.md"),
							start: LineCol { line: 1u32, col: 0u32 }
						},
						InstanceRoot,
						FragmentNode,
						related! {
							Children [
								(
									NodeTag(String::from("h1")),
									ElementNode { self_closing: false },
									related! {
										Children [
											TextNode(String::from("Hello"))
										]
									}
								),
								(
									NodeTag(String::from("p")),
									ElementNode { self_closing: false },
									related! {
										Children [
											TextNode(String::from("This page is all about saying")),
											(
												ExprIdx(0u32),
												BlockNode,
												OnSpawnTemplate::new_insert(#[allow(unused_braces)]{"hello" }.into_node_bundle()))
										]
									}
								),
								(
									NodeTag(String::from("main")),
									ElementNode { self_closing: false },
									related! {
										Children [
											TextNode(String::from("## Nested Heading\n\tnested markdown doesnt work yet"))
										]
									}
								)
							]
						}
					)
				}
		}.to_string());
	}
}
