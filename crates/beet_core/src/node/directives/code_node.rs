use crate::as_beet::*;
use bevy::prelude::*;





/// An element containing code, this element will be replaced by the `<pre>`
/// generated by syntect.
#[derive(Debug, Clone, PartialEq, Hash, Component, Reflect)]
#[reflect(Component)]
#[component(immutable)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "tokens", derive(ToTokens))]
pub struct CodeNode {
	pub lang: String,
}
impl CodeNode {
	/// Create a new [`CodeNode`] with the given language.
	pub fn new(lang: impl Into<String>) -> Self {
		Self {
			lang: lang.into(),
		}
	}
}
impl Default for CodeNode {
	fn default() -> Self { Self::new("plaintext") }
}
