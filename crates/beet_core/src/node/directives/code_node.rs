use crate::as_beet::*;
use bevy::prelude::*;





/// An element containing code, this element will be replaced by the `<pre>`
/// generated by syntect.
#[derive(Debug, Clone, PartialEq, Hash, Component, Reflect)]
#[reflect(Component)]
#[component(immutable)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "tokens", derive(ToTokens))]
pub struct CodeNode {
	pub lang: String,
}
impl CodeNode {
	/// Create a new [`CodeNode`] with the given language.
	pub fn new(lang: impl Into<String>) -> Self {
		Self {
			lang: lang.into(),
		}
	}
}
impl Default for CodeNode {
	fn default() -> Self { Self::new("plaintext") }
}




/// Add a <CodeNode> to all `<code>` nodes inside a `<pre>`.
/// Find all `<pre><code lang="...">` elemetnts and replace them with a [`CodeNode`].
pub fn pre_code_to_code_node() {

	// "code" => {
	// 	let code_el = if let Some((attr_ent, Some(text))) =
	// 		attributes.find(entity, "lang")
	// 	{
	// 		commands.entity(attr_ent).despawn();
	// 		CodeNode::new(&text.0)
	// 	} else {
	// 		CodeNode::default()
	// 	};
	// 	commands.entity(entity).insert(code_el);
	// }
}
