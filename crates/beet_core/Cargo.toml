[package]
name = "beet_core"
version.workspace = true
edition.workspace = true
authors.workspace = true
documentation.workspace = true
license.workspace = true
readme.workspace = true
description = "Core utilities for the beet ecosystem"
repository.workspace = true


[[example]]
name = "to_tokens"
path = "examples/to_tokens.rs"
required-features = ["tokens"]

[[test]]
name = "to_tokens"
path = "tests/to_tokens.rs"
required-features = ["tokens"]


[features]
default = ["nightly", "bevy"]
nightly = ["beet_utils/nightly"]
bevy = ["dep:bevy"]
bevy_text = ["bevy", "bevy/bevy_text"]
bevy_scene = ["bevy", "bevy/bevy_scene", "serde"]
serde = ["dep:serde", "dep:serde_json", "dep:clap", "dep:ron", "dep:toml"]
rand = ["dep:rand", "dep:rand_chacha", "dep:getrandom"]
# is this nessecary?
web = [
	"dep:wasm-bindgen",
	"dep:wasm-bindgen-futures",
	"dep:console_error_panic_hook",
	"dep:web-sys",
	"dep:js-sys",
]

fs = ["beet_utils/fs"]
tokens = [
	"serde",
	"dep:syn",
	"dep:quote",
	"dep:proc-macro2",
	"dep:proc-macro2-diagnostics",
]


[dependencies]
tracing.workspace = true
beet_utils.workspace = true
beet_core_macros.workspace = true
rapidhash.workspace = true
send_wrapper.workspace = true
variadics_please.workspace = true

# bevy dependencies (optional)
bevy = { workspace = true, optional = true }

# serde
serde = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }
clap = { workspace = true, optional = true }
ron = { workspace = true, optional = true }
toml = { workspace = true, optional = true }

# tokens dependencies (optional)
heck = { workspace = true }
syn = { workspace = true, optional = true }
quote = { workspace = true, optional = true }
proc-macro2 = { workspace = true, optional = true }
proc-macro2-diagnostics = { workspace = true, optional = true }

rand = { workspace = true, optional = true }
rand_chacha = { workspace = true, optional = true }
getrandom = { workspace = true, optional = true }

## utils
anyhow.workspace = true
thiserror.workspace = true
extend.workspace = true

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# server-specific dependencies (optional)
glob = { workspace = true, optional = true }

# async (server-specific)
tokio = { workspace = true, optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
# web dependencies (WASM only)
js-sys = { workspace = true, optional = true }
wasm-bindgen = { workspace = true, optional = true }
wasm-bindgen-futures = { workspace = true, optional = true }
console_error_panic_hook = { workspace = true, optional = true }

#https://rustwasm.github.io/wasm-bindgen/api/web_sys/
#https://github.com/rustwasm/wasm-bindgen/blob/main/crates/web-sys/Cargo.toml
[target.'cfg(target_arch = "wasm32")'.dependencies.web-sys]
workspace = true
optional = true
features = [
	# File
	"File",
	"FileList",
	# Blob
	'Blob',
	'BlobEvent',
	'BlobEventInit',
	'BlobPropertyBag',
	# HTML
	"Text",
	"Comment",
	"Node",
	"NodeList",
	'Headers',
	'Document',
	'Element',
	'Window',
	'HtmlAnchorElement',
	'HtmlButtonElement',
	'HtmlCanvasElement',
	'HtmlDivElement',
	'HtmlHeadElement',
	"HtmlInputElement",
	'HtmlIFrameElement',
	'HtmlLinkElement',
	'HtmlParagraphElement',
	'HtmlScriptElement',
	# Style
	'MediaQueryList',
	# Events
	'MouseEvent',
	'KeyboardEvent',
	# JS
	'console',
	'Navigator',
	'Performance',
	# Fetch
	'Request',
	'RequestInit',
	'RequestMode',
	'Response',
	'ReadableStream',
	'ReadableStreamDefaultReader',
	# Blob
	'Blob',
	'BlobEvent',
	'BlobEventInit',
	'BlobPropertyBag',
	# Url
	'Url',
	'History',
	'Location',
	'UrlSearchParams',
	# Sockets
	'BinaryType',
	'FileReader',
	'ErrorEvent',
	'MessageEvent',
	'ProgressEvent',
	'WebSocket',
	# Resize Observer
	'ResizeObserver',
	'ResizeObserverBoxOptions',
	'ResizeObserverEntry',
	'ResizeObserverOptions',
	'ResizeObserverSize',
	'DomRect',
	'DomRectReadOnly',
]


[dev-dependencies]
sweet.workspace = true


[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tokio.workspace = true
