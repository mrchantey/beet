#[allow(unused)]
use beet_dom::prelude::*;
#[allow(unused)]
use beet_core::prelude::*;
impl IntoBundle<Self> for MyNode {
    fn into_bundle(self) -> impl Bundle {
        let Self { present, optional, onclick, nested } = self;
        #[allow(unused_braces)]
        (
            OnSpawn::new(move |entity| {
                let parent_entity = entity.id();
                entity
                    .world_scope(move |world| {
                        world
                            .spawn((
                                AttributeOf::new(parent_entity),
                                present.into_bundle(),
                                AttributeKey::new("present"),
                            ));
                        if let Some(optional) = optional {
                            world
                                .spawn((
                                    AttributeOf::new(parent_entity),
                                    optional.into_bundle(),
                                    AttributeKey::new("optional"),
                                ));
                        }
                        world.entity_mut(parent_entity).insert(onclick.into_bundle());
                        world
                            .spawn((
                                AttributeOf::new(parent_entity),
                                AttributeKey::new("onclick"),
                            ));
                    });
            }),
            nested.into_bundle(),
        )
    }
}
