use bevy::prelude::*;
use beet_core::prelude::*;
/// probably the best templating layout ever
#[derive(Props)]
pub(crate) struct MyNode {
    /// some comment
    pub foo: u32,
    pub bar: u32,
}
impl MyNode {
    pub fn system(
        #[allow(unused_variables)]
        In((entity, input)): In<(Entity, Self)>,
    ) -> impl Bundle + use<> {
        #[allow(unused_variables)]
        let Self { foo, mut bar } = input;
        ()
    }
}
impl IntoBundle<Self> for MyNode {
    fn into_bundle(self) -> impl Bundle {
        OnSpawn::new(move |entity_world_mut: &mut EntityWorldMut| {
            let id = entity_world_mut.id();
            let bundle = entity_world_mut
                .world_scope(|world| {
                    world
                        .run_system_cached_with(Self::system, (id, self))
                        .map_err(|err| {
                            bevyhow!(
                                "Error running template system for `MyNode`: {}", err
                            )
                        })
                        .unwrap_or_exit()
                });
            entity_world_mut.insert(bundle.into_bundle());
        })
    }
}
